# Stacks and queues

```python
class Queue:
    def put(self, v): ...
    def front(self): ...
    def get(self): ...

class Stack:
    def push(self, v): ...
    def top(self): ...
    def pop(self): ...
```

## Reverse

Code a function that reverses the contents of a queue. 

**Requirement**: use a stack and no lists. The input queue should contain the reversed elements at the end of the function.

``` python
def reverse(queue: Queue):
```

# Iterators and Higher-order functions

## `Take`
Code the iterator `Take` that will produce the first `n` elements in a list. If `n` is larger than the list, then the entire list is produced.

## `TakeWhile`
Code the iterator `TakeWhile` that will produce the elements while a given predicate is true.

For example:

``` python
for x in TakeWhile(is_even, [2, 4, 6, 8, 9, 5, 2, 3]):
    print(x)
```

will print:

    2
    4
    6
    8

## `find_with`

Code a higher-order function `find_with` that returns one element in the list for which the predicate is true, or `None` if not found.

For example,

``` python
my_games = [
    (27, "Great game 1"),
    (20, "Average game 1"),
    (10, "Bad game 1"),
    (12, "Bad game 2"),
    (7,  "Terrible game"),
    (25, "Average game 2"),
    (49, "Best game ever")
]

def good_game(g):
    return g[0] >= 25

print(find_with(good_game, my_games))
```

would print:

    (25, "Average game 2")

or

    (49, "Best game ever")